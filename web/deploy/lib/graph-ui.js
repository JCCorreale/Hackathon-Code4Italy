// Generated by CoffeeScript 1.7.1
var Drawer, GraphUi, GraphUtils, LinkDrawer, NodeDrawer, SvgUtils;

GraphUtils = (function() {
  function GraphUtils() {}

  GraphUtils.resolveId = function(model) {
    var l, n, nodesIndex, _i, _j, _len, _len1, _ref, _ref1;
    nodesIndex = {};
    _ref = model.nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      nodesIndex[n.id] = n;
    }
    _ref1 = model.links;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      l = _ref1[_j];
      l.source = nodesIndex[l.source];
      l.target = nodesIndex[l.target];
    }
  };

  return GraphUtils;

})();

SvgUtils = (function() {
  function SvgUtils() {}

  SvgUtils.linkArc = function(d) {
    var dr, dx, dy;
    dx = d.target.x - d.source.x;
    dy = d.target.y - d.source.y;
    dr = Math.sqrt(dx * dx + dy * dy);
    return "M" + d.source.x + ", " + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
  };

  SvgUtils.transform = function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  };

  SvgUtils.defineArrow = function(svg) {
    if (this.arrowDefined) {
      return;
    }
    svg.append("defs").append("marker").attr("id", "arrow").attr("viewBox", "0 -5 10 10").attr("refX", 18).attr("refY", -1.5).attr("markerWidth", 16).attr("markerHeight", 16).attr("orient", "auto").append("path").attr("d", "M0,-5L10,0L0,5").attr("style", "stroke:#a3a3a3");
    this.arrowDefined = true;
  };

  return SvgUtils;

})();

Drawer = (function() {
  var _doNothing;

  _doNothing = function() {};

  function Drawer(wrapper, injectFn, updateFn) {
    if (typeof wrapper === 'string') {
      wrapper = {
        wrapper: wrapper != null ? wrapper : 'g',
        injectFn: injectFn != null ? injectFn : _doNothing,
        updateFn: updateFn != null ? updateFn : _doNothing
      };
    }
    this.wrapper = wrapper.wrapper;
    this.update = wrapper.updateFn;
    this.injectInto = function(selection, target, data, layout) {
      var newElements;
      if (selection == null) {
        selection = target.append('g').selectAll(this.wrapper);
      }
      selection = selection.data(data);
      newElements = selection.enter().append(this.wrapper);
      wrapper.injectFn.call(this, newElements, target, layout);
      return selection;
    };
    return this;
  }

  return Drawer;

})();

NodeDrawer = new Drawer({
  wrapper: 'g',
  updateFn: function(selection) {
    this.nodesSelection.attr('transform', SvgUtils.transform);
    this.labelsSelection.attr('transform', SvgUtils.transform);
  },
  injectFn: function(selection, data, layout) {
    this.nodesSelection = selection.append('circle').attr('r', function(d) {
      if (d.type === "atto") {
        return 25;
      } else {
        return 15;
      }
    }).attr('class', 'node').call(layout.drag);
    this.labelsSelection = selection.append('text').attr('x', function(d) {
      if (d.type === "atto") {
        return 28;
      } else {
        return 18;
      }
    }).attr('y', '.30em').text(function(d) {
      return d.name;
    }).attr('class', 'node-label');
  }
});

LinkDrawer = new Drawer({
  wrapper: 'g',
  updateFn: function() {
    this.linksSelection.attr('d', SvgUtils.linkArc);
  },
  injectFn: function(selection) {
    this.linksSelection = selection.append('path').attr('marker-end', 'url(#arrow)').attr('class', 'link');
  }
});

GraphUi = (function() {
  var _tick;

  GraphUi.defaults = {
    width: 960,
    height: 500,
    linkDistance: 160,
    charge: -600
  };

  _tick = function(evt) {
    this.nodeDrawer.update();
    this.linkDrawer.update();
  };

  function GraphUi(target, model, nodeDrawer, linkDrawer, opt) {
    var _charge, _guiModel, _height, _layout, _linkDistance, _ref, _ref1, _ref2, _ref3, _resize, _svg, _this, _width;
    if (opt == null) {
      opt = {};
    }
    _this = this;
    _width = (_ref = opt.width) != null ? _ref : GraphUi.defaults.width;
    _height = (_ref1 = opt.height) != null ? _ref1 : GraphUi.defaults.height;
    _linkDistance = (_ref2 = opt.linkDistance) != null ? _ref2 : GraphUi.defaults.linkDistance;
    _charge = (_ref3 = opt.charge) != null ? _ref3 : GraphUi.defaults.charge;
    this.nodeDrawer = nodeDrawer != null ? nodeDrawer : NodeDrawer;
    this.linkDrawer = linkDrawer != null ? linkDrawer : LinkDrawer;
    _guiModel = {
      nodes: model.nodes,
      links: model.links
    };
    _layout = d3.layout.force().nodes(_guiModel.nodes).links(_guiModel.links).size([_width, _height]).linkDistance(_linkDistance).charge(_charge).on('tick', function() {
      return _tick.call(_this, this);
    });
    if (opt.linkStrength != null) {
      _layout.linkStrength(opt.linkStrength);
    }
    if (opt.friction != null) {
      _layout.friction(opt.friction);
    }
    if (opt.chargeDistance != null) {
      _layout.chargeDistance(opt.chargeDistance);
    }
    if (opt.gravity != null) {
      _layout.gravity(opt.gravity);
    }
    _svg = target.append('svg').attr('width', _width).attr('height', _height);
    SvgUtils.defineArrow(_svg);
    this.update = function() {
      this.linksSelection = this.linkDrawer.injectInto(this.linksSelection, _svg, _guiModel.links);
      this.nodesSelection = this.nodeDrawer.injectInto(this.nodesSelection, _svg, _guiModel.nodes, _layout);
    };
    _resize = function() {
      _width = parseInt(target.style('width'), 10);
      _height = parseInt(target.style('height'), 10);
      _svg.attr('width', _width).attr('height', _height);
      _layout.size([_width, _height]);
      _layout.start();
    };
    if (opt.windowResizedEvent != null) {
      opt.windowResizedEvent.addHandler(_resize);
    }
    this.getNode = function(id) {
      return this.nodesSelection.filter(function(d) {
        if (d.id === id) {
          return d;
        }
      });
    };
    this.update();
    _resize();
    _layout.start();
    return;
  }

  return GraphUi;

})();
