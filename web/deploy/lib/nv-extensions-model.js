// Generated by CoffeeScript 1.7.1
(function() {
  var UpdatableAxisLabels, UpdatableModel, UpdatableSerie;
  nv.utils.model = {};
  nv.utils.model.UpdatableSerie = function(readonlySerie) {
    var _keyChangedEvt, _serie, _valuesChangedEvt;
    _serie = JSON.parse(JSON.stringify(readonlySerie));
    _valuesChangedEvt = new Evt();
    _keyChangedEvt = new Evt();
    this.valuesChanged = Evt.toPublicEvt(_valuesChangedEvt);
    this.keyChanged = Evt.toPublicEvt(_keyChangedEvt);
    this.addValue = (function(_this) {
      return function(point) {
        _serie.values.push(point);
        _valuesChangedEvt.emit(_this);
      };
    })(this);
    this.removeValue = (function(_this) {
      return function(point) {
        var i;
        i = _serie.values.indexOf(point);
        if (i > -1) {
          _serie.splice(i, 1);
          _valuesChangedEvt.emit(_this);
        }
      };
    })(this);
    this.getValues = function() {
      return _serie.values;
    };
    this.setKey = (function(_this) {
      return function(key) {
        if (key !== _serie.key) {
          _serie.key = key;
          _keyChangedEvt.emit(_this);
        }
      };
    })(this);
    this.getKey = function() {
      return _serie.key;
    };
    this.values = _serie.values;
    this.key = _serie.key;
    return this;
  };
  UpdatableSerie = nv.utils.model.UpdatableSerie;
  nv.utils.model.UpdatableAxisLabels = function(readonlyAxisLabels) {
    var l, __this, _changedEvt, _i, _len;
    __this = [];
    for (_i = 0, _len = readonlyAxisLabels.length; _i < _len; _i++) {
      l = readonlyAxisLabels[_i];
      __this.push(l);
    }
    _changedEvt = new Evt();
    __this.changed = Evt.toPublicEvt(_changedEvt);
    __this.addValue = (function(_this) {
      return function(label) {
        __this.push(label);
        _changedEvt.emit(_this);
      };
    })(this);
    __this.removeValue = (function(_this) {
      return function(label) {
        var i;
        i = __this.indexOf(point);
        if (i > -1) {
          __this.splice(i, 1);
          _valuesChangedEvt.emit(_this);
        }
      };
    })(this);
    return __this;
  };
  UpdatableAxisLabels = nv.utils.model.UpdatableAxisLabels;
  nv.utils.model.UpdatableModel = function(readonlyModel) {
    var ml, s, _addSerie, _changedEvt, _i, _len, _model, _ref, _triggerChangedEvt;
    _changedEvt = new Evt();
    _model = {
      series: [],
      xAxisLabels: [],
      yAxisLabels: []
    };
    _triggerChangedEvt = (function(_this) {
      return function() {
        _changedEvt(_this);
      };
    })(this);
    _addSerie = function(s) {
      var ms;
      if (!(s instanceof UpdatableSerie)) {
        ms = new UpdatableSerie(s);
        ms.valuesChanged.addHandler(_triggerChangedEvt);
        ms.keyChanged.addHandler(_triggerChangedEvt);
      }
      _model.series.push(ms);
    };
    _ref = readonlyModel.series;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _addSerie(s);
    }
    if (readonlyModel.xAxisLabels != null) {
      ml = new UpdatableAxisLabels(readonlyModel.xAxisLabels);
      ml.changed.addHandler(_triggerChangedEvt);
      _model.xAxisLabels = ml;
    }
    if (readonlyModel.yAxisLabels != null) {
      ml = new UpdatableAxisLabels(readonlyModel.yAxisLabels);
      ml.changed.addHandler(_triggerChangedEvt);
      _model.yAxisLabels = ml;
    }
    this.changed = Evt.toPublicEvt(_changedEvt);
    this.addSerie = (function(_this) {
      return function(serie) {
        _addSerie(serie);
        _changedEvt.emit(_this);
      };
    })(this);
    this.removeSerie = (function(_this) {
      return function(serie) {
        var i, _j, _len1, _ref1;
        _ref1 = _model.series;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          s = _ref1[i];
          if (s.key === serie.key) {
            _model.series.splice(i, 1);
            _changedEvt.emit(_this);
            break;
          }
        }
      };
    })(this);
    this.series = _model.series;
    this.xAxisLabels = _model.xAxisLabels;
    this.yAxisLabels = _model.yAxisLabels;
    return this;
  };
  return UpdatableModel = nv.utils.model.UpdatableModel;
})();
